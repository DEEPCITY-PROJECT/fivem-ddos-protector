#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fivem-ddos-protector:server');
var http = require('http');
const exec = require('sync-exec');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function initRules() {
  // Fivem Rules
  let ips = [
    "201.42.94.22",
    "146.59.193.195",
    "51.210.126.15",
    "51.178.63.83",
    "178.33.224.212",
    "5.135.143.71",
    "121.4.163.148"
  ]
  exec("sudo iptables -F");
  exec("sudo iptables -X");
  for (let i = 0; i <= 5; i++) {
    exec("sudo iptables -D INPUT -p tcp --dport 30120 -j DROP");
    exec("sudo iptables -D INPUT -p udp --dport 30120 -j DROP");
    for(let ip of ips ) {
      exec(`sudo iptables -D INPUT -p tcp --dport 30120 -s ${ip} -j ACCEPT`);
      exec(`sudo iptables -D INPUT -p udp --dport 30120 -s ${ip} -j ACCEPT`);
    }
  }
  for(let ip of ips ) {
    exec(`sudo iptables -A INPUT -p tcp --dport 30120 -s ${ip} -j ACCEPT`);
    exec(`sudo iptables -A INPUT -p udp --dport 30120 -s ${ip} -j ACCEPT`);
  }
  exec("sudo iptables -A INPUT -p tcp --dport 30120 -j DROP");
  exec("sudo iptables -A INPUT -p udp --dport 30120 -j DROP");
}

function onListening() {
  initRules();
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
